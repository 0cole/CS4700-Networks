#!/usr/bin/env python3
import socket
import json
import argparse
import ssl

def createWordlist():
    """
    Parse the wordlist.txt that is located in the same directory as the 
    script and populate a list with the wordlist's contents.
    """
    word_list = []
    file = open('wordlist.txt', 'r')
    line = file.readline()
    while line:
        word_list.append(line.replace('\n', ''))
        line = file.readline()

    return word_list

def connect(host, port, secure):
    """
    Create a connection to the 'host' server socket. If secure == True,
    wrap the connection using ssl. Catch any errors that may occur
    during the connection.
    """
    try:
        # init socket
        client = socket.create_connection((host, port))

        # Wrap connection if secure == True
        if secure:
            context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
            context.check_hostname = False
            context.verify_mode = ssl.CERT_NONE
            client = context.wrap_socket(client, server_hostname=host)

        return client
    
    except (socket.error, ssl.SSLError) as e:
        print(f'ERROR: {e}')
        return None

def sendMessage(socket, message):
    """
    Convert json obj into a string so it can be sent to the server socket
    """
    msg_str = json.dumps(message) + '\n'
    socket.sendall(msg_str.encode('ascii'))

def receiveMessage(socket: socket.socket):
    """
    Retrieves the message in increments of 4096 bytes and stores it in a
    string buffer. Once there is no more text to read, convert buffer to json.
    """
    buf = ''
    while True:
        try:
            chunk = socket.recv(4096).decode('ascii')
            if chunk is None:
                break
            buf += chunk

            try:
                res_json = json.loads(buf)
                return res_json
            except json.JSONDecodeError as e:
                continue
            
        except Exception as e:
            print(f'Socket error: {e}')
            break

    print('Something went wrong parsing the json')
    return None
    
def run(s, user):
    """
    Commmunicate with the server socket. Send an initialization message to
    retrieve the id, then begin guessing and filter the remaining words 
    based on the feedbakc. Once the word is guessed correctly, print the flag
    that is sent inside of the correctly guessed message and return.
    """
    init_msg = {'type': 'hello', 'northeastern_username': user}
    sendMessage(s, init_msg)
    msg = receiveMessage(s)
    id = msg['id']

    words = createWordlist()

    while words:
        guess = words.pop(0)
        guess_msg = {'type': 'guess', 'id': id, 'word': guess}
        sendMessage(s, guess_msg)
        msg = receiveMessage(s)

        if msg['type'] == 'bye':
            # Correct guess
            print(msg['flag'])
            return
        elif msg['type'] == 'retry':
            # Incorrect guess, filter out rest of words
            marks = msg['guesses'][-1]['marks']
            filtered_words = []

            for word in words:
                valid = True
                for i, letter in enumerate(guess):
                    if marks[i] == 2 and word[i] != letter:
                        valid = False
                        break
                    elif marks[i] == 1 and (word[i] == letter or letter not in word):
                        valid = False
                        break
                    elif marks[i] == 0 and letter in word[i]:
                        valid = False
                        break
                if valid:
                    filtered_words.append(word)
            
            words = filtered_words

def main():
    """
    Parse args and determine the variables this script will use. Initialize
    the socket, and then begin communicating with it. Once the word has been
    guessed, terminate the socket connection and finish running the script.
    """
    secure = False

    parser = argparse.ArgumentParser()
    parser.add_argument('-p', default=27993, type=int)
    parser.add_argument('-s', action='store_true')
    parser.add_argument('hostname')
    parser.add_argument('username')
    args = parser.parse_args()
    
    if args.s:
        secure = True
        port = 27994
    if args.p:
        port = args.p

    socket = connect(args.hostname, port, secure)
    run(socket, args.username)
    socket.close()

if __name__ == '__main__':
    main()
