#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class ForwardingTableEntry:
    def __init__(self, src, ASPath, network, netmask, localpref, origin, selfOrigin):
        self.ASPath = ASPath
        self.localpref = localpref
        self.netmask = netmask
        self.network = network
        self.origin = origin
        self.selfOrigin = selfOrigin
        self.src = src
    
    def asDict(self):
        table_entry = {
            'ASPath': self.ASPath,
            'localpref': self.localpref,
            'netmask': self.netmask,
            'network': self.network,
            'origin': self.origin,
            'selfOrigin': self.selfOrigin,
            'peer': self.src
        }
        return table_entry

class Router:

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.relations = {}
        self.sockets = {}
        self.ports = {}
        self.forwarding_table = []
        self.updates = []
        self.update_counter = 0
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))

                try:
                    parsed_msg = json.loads(msg)
                    print(f'-----PARSED THE FOLLOWING MESSAGE: {parsed_msg['type']}-----\n{parsed_msg}')
                    self.handlePacket(parsed_msg, socket)
                except json.JSONDecodeError as e:
                    print(f'Error parsing the json: {e}')
        return
    
    def handlePacket(self, packet, socket):
        noerror = False
        type = packet['type']
        if type == 'update':
            noerror = self.update(packet)
        elif type == 'data':
            noerror = self.data(packet, socket)
        elif type == 'dump':
            noerror = self.dump(packet)
        else:
            print(f'Unknown packet type')
            return
        
        #Check if an error occurred when handling the packet
        if not noerror:
            pass
        
    def storeUpdate(self, packet):
        self.updates.append((self.update_counter, packet))
        self.update_counter += 1

    def update(self, packet):
        # Store the update in a tuple with a counter that indicates when the packet was received
        self.storeUpdate(packet)

        src = packet['src']
        entry = ForwardingTableEntry(ASPath=packet['msg']['ASPath'],
                                    localpref=packet['msg']['localpref'],
                                    netmask=packet['msg']['netmask'],
                                    network=packet['msg']['network'],
                                    origin=packet['msg']['origin'],
                                    selfOrigin=packet['msg']['selfOrigin'],
                                    src=src)
        self.forwarding_table.append(entry)

        if src in self.relations:
            # Check if the src is a customer or peer/provider
            from_cust = self.relations[src] == 'cust'

            # Broadcast update to  neighbors
            for dest, rel in self.relations.items():
                # Only send to neighbors that are not the original source and are either
                # customers or peers/providers if the packet came from a customer
                if dest != src and (rel == 'cust' or from_cust):
                    ASPath = [self.asn] + packet['msg']['ASPath']

                    update_packet = {
                        'src': self.our_addr(dest),
                        'dst': dest,
                        'type': 'update',
                        'msg': {
                            'network': packet['msg']['network'],
                            'netmask': packet['msg']['netmask'],
                            'ASPath': ASPath
                        }
                    }
                    try:
                        self.send(dest, json.dumps(update_packet))
                    except:
                        raise Exception(f'Unable to forward announcement to {dest}')
                    
        return True

    def data(self, packet, socket):
        data_msg = {
            'type': 'data',
            'src': self.our_addr(packet['dst']),
            'dst': packet['dst'],
            'msg': packet['msg']
        }

        # send data to neighbors if they are in the same network
        for entry in self.forwarding_table:
            if self.applySubnetMask(packet['dst'], entry.netmask) == \
                self.applySubnetMask(entry.network, entry.netmask):
                try:
                    self.send(entry.src, json.dumps(data_msg))
                except:
                    raise Exception(f'Unable to send table to {entry.src}')
        return True
    
    def applySubnetMask(self, ip, subnet_mask):
        try:
            ip_octets = map(int, ip.split('.'))
            mask_octets = map(int, subnet_mask.split('.'))
            # mask with AND operation
            masked_ip = '.'.join(str(octet & mask) for octet, mask in zip(ip_octets, mask_octets))
            return masked_ip
        
        except ValueError:
            raise ValueError(f"Invalid IP or subnet mask: {ip}, {subnet_mask}")

    def dump(self, packet):
        dst = packet['src']
        dump = {
            'src': self.our_addr(dst),
            'dst': dst,
            'type': 'table',
            'msg': []
        }

        # Dump each entry
        for table_entry in self.forwarding_table:
            dump['msg'].append(table_entry.asDict())
        
        self.send(dst, json.dumps(dump))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
