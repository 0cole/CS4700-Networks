#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class Router:

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.relations = {}
        self.sockets = {}
        self.ports = {}
        self.forwarding_table = {}
        self.updates = []
        self.update_counter = 0
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))

                try:
                    parsed_msg = json.loads(msg)
                    print(f'-----PARSED THE FOLLOWING MESSAGE: {parsed_msg['type']}-----\n{parsed_msg}')
                    self.handlePacket(parsed_msg)
                except json.JSONDecodeError as e:
                    print(f'Error parsing the json: {e}')
        return
    
    def handlePacket(self, packet):
        noerror = False
        type = packet['type']
        if type == 'update':
            noerror = self.update(packet)
        elif type == 'data':
            noerror = self.data(packet)
        elif type == 'dump':
            noerror = self.dump(packet)
        else:
            print(f'Unknown packet type')
            return
        
        #Check if an error occurred when handling the packet
        if not noerror:
            pass
        
    def storeUpdate(self, packet):
        self.updates.append((self.update_counter, packet))
        self.update_counter += 1

    def update(self, packet):
        """
        1. Save this update for future reference
        2. Create an entry in the forward table
        3. For every neighbor, send the update announcement
        """
        # Store the update in a tuple with a counter that indicates when the packet was received
        self.storeUpdate(packet)

        peer = packet['src']
        network = packet['msg']['network']
        netmask = packet['msg']['netmask']
        ASPath = packet['msg']['ASPath']

        # Save this in our forwarding table
        neighbor_dict = {
            'ASPath': ASPath,
            'localpref': packet['msg']['localpref'],
            'netmask': netmask,
            'network': network,
            'origin': packet['msg']['origin'],
            'selfOrigin': packet['msg']['selfOrigin'],
            'peer': peer
        }

        self.forwarding_table[(network, netmask)] = neighbor_dict
        ASPath = [self.asn] + ASPath

        # Send to every neighbor in self.relations
        if peer in self.relations:
            for dst, rel in self.relations.items():
                if not peer == dst:
                    update_packet = {
                        'src': self.our_addr(dst),
                        'dst': dst,
                        'type': 'update',
                        'msg': {
                            'network': network,
                            'netmask': netmask,
                            'ASPath': ASPath
                        }
                    }
                    try:
                        self.send(dst, json.dumps(update_packet))
                    except Exception as e:
                        print(f"ERROR WHEN UPDATING: {e}")
                        return
        return True

    def data(self, packet):
        """
        1. Create message to send
        2. Find if the neighbor is valid
            a. Compare if the peer matches one of the subnet masked ips
            b. send if there is a match
        """
        peer = packet['dst']
        src = self.our_addr(peer)
        
        # Create data message to send
        data_msg = {
            'type': 'data',
            'src': src,
            'dst': peer,
            'msg': packet['msg']
        }

        # find neighbor to send data to by comparing networks with netmasks
        for network_arr, neighbor in self.forwarding_table.items():
            if self.applySubnetMask(peer, network_arr[1]) == \
                self.applySubnetMask(network_arr[0], network_arr[1]):
                try:
                    self.send(neighbor['peer'], json.dumps(data_msg))
                except Exception as e:
                        print(f"ERROR WHEN SENDING DATA: {e}")
                        return
        return True
    
    def applySubnetMask(self, ip, subnet_mask):
        try:
            ip_octets = map(int, ip.split('.'))
            mask_octets = map(int, subnet_mask.split('.'))
            # mask with AND operation
            masked_ip = '.'.join(str(octet & mask) for octet, mask in zip(ip_octets, mask_octets))
            return masked_ip
        
        except ValueError:
            raise ValueError(f"Invalid IP or subnet mask: {ip}, {subnet_mask}")

    def dump(self, packet):
        """
        1. Create dump dict
            a. put every entry in the forwarding table into dump['msg']
        2. Send dump dict to peer
        """
        peer = packet['src']
        src = self.our_addr(peer)
        dump = {
            'src': src,
            'dst': peer,
            'type': 'table',
            'msg': []
        }

        # Add each entry into the dump dict
        for network_arr, neighbor_dict in self.forwarding_table.items():
            src_dict = {
                'ASPath': neighbor_dict['ASPath'],
                'localpref': neighbor_dict['localpref'],
                'origin': neighbor_dict['origin'],
                'selfOrigin': neighbor_dict['selfOrigin'],
                'network': network_arr[0],
                'netmask': network_arr[1],
                'peer': neighbor_dict['peer'],
            }
            dump['msg'].append(src_dict)
        
        try:
            self.send(peer, json.dumps(dump))
        except Exception as e:
            print(f"ERROR WHEN DUMPING: {e}")
            return

        return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
