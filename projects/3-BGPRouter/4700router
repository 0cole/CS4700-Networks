#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math
import struct, copy

class Router:

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.relations = {}
        self.sockets = {}
        self.ports = {}
        self.forwarding_table = {}
        self.updates = []
        self.changes = []
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", 
                                            "src": self.our_addr(neighbor), 
                                            "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        print(f'----SENDING TO {network} ----> {message}')
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def sendNoRoute(self, ip):
        msg = {
            'src': self.our_addr(ip),
            'dst': ip,
            'type': 'no route',
            'msg': {}
        }
        self.send(ip, json.dumps(msg))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))

                try:

                    parsed_msg = json.loads(msg)
                    message_type = parsed_msg['type']
                    print(f'-----PARSED THE FOLLOWING MESSAGE: {message_type} -----> {parsed_msg}')
                    print(f'srcif ----> {srcif}')
                    self.handlePacket(parsed_msg, srcif)
                except json.JSONDecodeError as e:
                    print(f'Error parsing the json: {e}')
        return
        
    def storeUpdate(self, packet):
        self.updates.append(packet)

    def ipToBin(self, netmask):
        octets = map(int, netmask.split('.'))
        return ''.join(f'{octet:08b}' for octet in octets)
    
    def ipToInt(self, ip):
        octets = map(int, ip.split('.'))
        return sum(octet << (8 * (3 - i)) for i, octet in enumerate(octets))
    
    def intToIp(self, int_ip):
        return '.'.join(str((int_ip >> (8 * i)) & 0xFF) for i in reversed(range(4)))

    def verifyAggrigation(self, network1_arr1, network2_arr):
        """
        Check if two routes are capable of aggregation. 
        Return false if they are not aggregatable.
        """
        route1_network, route1_netmask, route1_ip = \
            network1_arr1[0], network1_arr1[1], network1_arr1[2]
        route2_network, route2_netmask, route2_ip = \
            network2_arr[0], network2_arr[1], network2_arr[2]

        if route2_netmask == route1_netmask and route1_ip == route2_ip:
            network1_int = self.ipToInt(route1_network)
            network2_int = self.ipToInt(route2_network)

            netmask1_len = (self.ipToBin(route1_netmask)).count('0')
            netmask2_len = (self.ipToBin(route2_netmask)).count('0')

            masked_network1 = network1_int >> (netmask1_len + 1)
            masked_network2 = network2_int >> (netmask2_len + 1)

            return masked_network1 == masked_network2
        else:
            return False
    
    def generateAggregateRoute(self, network_arr):
        """
        Shift the netmask to accomodate the new aggregation.
        """
        network, netmask, ip = network_arr[0], network_arr[1], network_arr[2]

        network_int = self.ipToInt(network)
        netmask_bin = self.ipToBin(netmask)

        netmask_zeroes = netmask_bin.count('0')
        matched_network = network_int >> (netmask_zeroes + 1)

        new_network = self.intToIp(matched_network << (netmask_zeroes + 1))
        new_netmask = self.intToIp(int(netmask_bin, 2) - 2 ** netmask_zeroes)

        return (new_network, new_netmask, ip)

    def findAggregatableRoute(self):
        """
        Look for any routes that can be aggregated then perform it.
        """
        for network_arr1, _ in self.forwarding_table.items():
            for network_arr2, _ in self.forwarding_table.items():
                if network_arr2 == network_arr1:
                        continue
                
                if self.verifyAggrigation(network_arr1, network_arr2):
                    route = self.generateAggregateRoute(network_arr1)
                    return [network_arr1, network_arr2, route]
        return None

    def coalesce(self):
        """
        Handle the coalescing of two routes. Called when routing table is updated.
        Approach is semi-naive since it iterates over all of the routes in the
        forwarding table.
        """
        print('--------COALESCING-----------')
        while True:
            aggretable_routes = self.findAggregatableRoute()
            print(f'aggretable_routes ----> {aggretable_routes}')
            if not aggretable_routes:
                break

            route_to_add = aggretable_routes[0]
            route_to_remove = aggretable_routes[1]
            aggregated_route = aggretable_routes[2]

            print(f'Removing route: {route_to_remove}')
            del self.forwarding_table[route_to_remove]

            prev_route = None
            for route, neighbor in self.forwarding_table.items():
                if route[0] == aggregated_route[0]:
                    prev_route = route
                    break
            
            print(f'Aggregating {route_to_remove} with {route_to_add} ----> {aggregated_route}')
            del self.forwarding_table[prev_route]
            self.forwarding_table[aggregated_route] = neighbor 

    def filterBySubnet(self, all_routes):
        possible_routes = []
        max_subnet = 0

        for route in all_routes:
            subnet = route['netmask']
            bin_subnet = bin(struct.unpack('!I', socket.inet_aton(subnet))[0])[2:]
            cidr = bin_subnet.count('1')
            
            if cidr == max_subnet:
                possible_routes.append(route)
            elif cidr > max_subnet:
                max_subnet = cidr
                possible_routes = [route]

        return possible_routes

    def filterByLocalpref(self, all_routes):
        possible_routes = []
        max_localpref = 0

        for route in all_routes:
            localpref = route['localpref']

            if localpref == max_localpref:
                possible_routes.append(route)
            elif localpref > max_localpref:
                max_localpref = localpref
                possible_routes = [route]
        return possible_routes

    def filterBySelfOrigin(self, all_routes):
        possible_routes = []

        for route in all_routes:
            if route['selfOrigin'] == True:
                possible_routes.append(route)

        # When there are no selfOrigin = True routes, just add all
        # and go to next step
        if len(possible_routes) == 0:
            possible_routes = all_routes
        return possible_routes

    def filterByASPath(self, all_routes):
        possible_routes = []
        min_aspath_len = float('inf')

        for route in all_routes:
            aspath_len = len(route['ASPath'])
            
            if aspath_len == min_aspath_len:
                possible_routes.append(route)
            elif aspath_len < min_aspath_len:
                min_aspath_len = aspath_len
                possible_routes = [route]
        return possible_routes

    def filterByOrigin(self, all_routes):
        possible_routes = []
        preference = ['IGP', 'EGP', 'UNK']
        min_idx = 2 # Start at UNK

        for route in all_routes:
            origin = route['origin']
            route_origin_idx = preference.index(origin)
            
            if route_origin_idx == min_idx:
                possible_routes.append(route)
            elif route_origin_idx < min_idx:
                min_idx = route_origin_idx
                possible_routes = [route]
        return possible_routes
    
    def filterByLowestSrc(self, all_routes):
        possible_ip = []
        lowest_ip = float('inf')

        for route in all_routes:
            src = route['peer']
            octets = map(int, src.split('.'))
            curr_ip = (next(octets) << 24) + (next(octets) << 16) + (next(octets) << 8) + next(octets)

            if curr_ip < lowest_ip:
                possible_ip = [route]
        return possible_ip

    def valididateRelationship(self, src, dst):
        """
        Update received from a customer: send updates to all other neighbors
        Update received from a peer or a provider: only send updates to your customers
        """

        src_rel = self.relations[src]
        dst_rel = self.relations[dst]

        print(f'src_rel ----> {src_rel}')
        print(f'dst_rel ----> {dst_rel}')

        if src_rel == 'cust':
            return dst
        elif dst_rel == 'cust':
            return dst
        return None


    def determineRoute(self, ip, srcif):
        """
        Generate all possible routes then filter in the follwing order
        until only 1 route remains.
        1. whichever route has the highest subnet mask
        2. highest localpref
        3. selfOrigin = True
        4. shortest ASPath
        5. origin (IGP > EGP > UNK)
        6. Lowest src ip
        """
        
        possible_routes, routes = [], []

        for network_arr, neighbor in self.forwarding_table.items():
            network = network_arr[0]
            netmask = network_arr[1]
            src = network_arr[2]
            if self.applySubnetMask(ip, netmask) == \
                    self.applySubnetMask(network, netmask):
                routes.append(neighbor)

        # for route in possible_routes:
        #     routes += route

        # print(possible_routes)
        # print(routes)

        if routes:
            if len(routes) > 1:
                routes = self.filterBySubnet(routes)
                print(f'after comparing subnets: {routes}')
            if len(routes) > 1:
                routes = self.filterByLocalpref(routes)
                print(f'after comparing localpref: {routes}')
            if len(routes) > 1:
                routes = self.filterBySelfOrigin(routes)
                print(f'after comparing selforigin: {routes}')
            if len(routes) > 1:
                routes = self.filterByASPath(routes)
                print(f'after comparing aspath: {routes}')
            if len(routes) > 1:
                routes = self.filterByOrigin(routes)
                print(f'after comparing origin: {routes}')
            if len(routes) > 1:
                routes = self.filterByLowestSrc(routes)
                print(f'after comparing lowest src: {routes}')

            if len(routes) == 1:
                opt_route = routes[0]['peer']
                confirmed_route = self.valididateRelationship(srcif, opt_route)

                print(f'----FOUND OPTIMAL ROUTE: {confirmed_route}')
                return confirmed_route
            else:
                self.sendNoRoute(ip)
        return None # If there are no valid routes
    
    def applySubnetMask(self, ip, subnet_mask):
        try:
            ip_octets = map(int, ip.split('.'))
            mask_octets = map(int, subnet_mask.split('.'))
            # mask with AND operation
            masked_ip = '.'.join(str(octet & mask) for octet, mask in zip(ip_octets, mask_octets))
            return masked_ip
        
        except ValueError:
            raise ValueError(f"Invalid IP or subnet mask: {ip}, {subnet_mask}")

    def update(self, packet, srcif):
        """
        1. Save this update for future reference
        2. Create an entry in the forward table
        3. For every neighbor, send the update announcement
        """

        peer = packet['src']
        network = packet['msg']['network']
        netmask = packet['msg']['netmask']
        localpref = packet['msg']['localpref']
        selfOrigin = packet['msg']['selfOrigin']
        ASPath = packet['msg']['ASPath']
        origin = packet['msg']['origin']

        # Save this in our forwarding table
        neighbor_dict = {
            'netmask': netmask,
            'network': network,
            'localpref': localpref,
            'selfOrigin': selfOrigin,
            'ASPath': ASPath,
            'origin': origin,
            'peer': peer
        }

        # # Add new entry to forwarding table f it does not already exist
        # if (network, netmask, peer) not in self.forwarding_table:
        #     self.forwarding_table[(network, netmask, peer)] = []
        self.forwarding_table[(network, netmask, peer)] = neighbor_dict
        self.coalesce()
        ASPath = [self.asn] + ASPath

        # Send to every neighbor in self.relations
        if peer in self.relations:
            for dst in self.relations.keys():
                confirmed_dst = self.valididateRelationship(srcif, dst)
                if confirmed_dst == None:
                    return False
                
                src = self.our_addr(dst)
                if peer != dst:
                    # Send ONLY the network, netmask, and aspath
                    update_packet = {
                        'src': src,
                        'dst': dst,
                        'type': 'update',
                        'msg': {
                            'network': network,
                            'netmask': netmask,
                            'ASPath': ASPath
                        }
                    }
                    try:
                        self.send(dst, json.dumps(update_packet))
                    except Exception as e:
                        print(f"ERROR WHEN UPDATING: {e}")
                        return
        return True
    
    def data(self, packet, srcif):
        """
        1. Create message to send
        2. Validate neighbor's route
        """
        peer = packet['dst']
        opt_peer = self.determineRoute(peer, srcif)

        # If there is an invalid relationship
        if opt_peer == None:
            return False

        print(f'----OPTIMAL PEER FOR {peer} ----> {opt_peer}')

        try:
            self.send(opt_peer, json.dumps(packet))
        except Exception as e:
            print(f"ERROR WHEN SENDING DATA: {e}")
            return
        return True
    
    def dump(self, packet):
        """
        1. Create dump dict
            a. put every entry in the forwarding table into dump['msg']
        2. Send dump dict to peer
        """
        peer = packet['src']
        src = self.our_addr(peer)
        dump = {
            'src': src,
            'dst': peer,
            'type': 'table',
            'msg': []
        }

        # Add each entry into the dump dict
        for network_arr, neighbor in self.forwarding_table.items():
            neighbor_dict = {
                'network': network_arr[0],
                'netmask': network_arr[1],
                'localpref': neighbor['localpref'],
                'selfOrigin': neighbor['selfOrigin'],
                'ASPath': neighbor['ASPath'],
                'origin': neighbor['origin'],
                'peer': network_arr[2],
            }
            dump['msg'].append(neighbor_dict)

        try:
            self.send(peer, json.dumps(dump))
        except Exception as e:
            print(f"ERROR WHEN DUMPING: {e}")
            return

        return True
    
    def disaggregate(self):
        """
        Create a new forwarding table and start over with
        saved update/withdrawal messages. Call coalesce after
        everything is finished. This appraoch can be optimized
        heavily.
        """
        print('--------DISAGGREGATING-----------')
        new_table = {}

        for entry in self.changes:

            if entry['type'] == 'update':
                peer = entry['src']
                netmask = entry['msg']['netmask']
                network = entry['msg']['network']
                entry_dict = {
                    'netmask': netmask,
                    'network': network,
                    'localpref': entry['msg']['localpref'],
                    'selfOrigin': entry['msg']['selfOrigin'],
                    'ASPath': entry['msg']['ASPath'],
                    'origin': entry['msg']['origin'],
                    'peer': peer,
                }
                print(f'SAVING ----> {(network,netmask, peer)}\n')
                new_table[(network, netmask, peer)] = entry_dict
        
            if entry['type'] == 'withdraw':
                remove = False
                peer = entry['src']
                netmask = entry['msg'][0]['netmask']
                network = entry['msg'][0]['network']

                for new_entry in new_table:
                    if network == new_entry[0] and peer == new_entry[2]:
                        remove = True
                if remove:
                    print(f'DELETING ----> {(network, netmask, peer)}')
                    del new_table[(network, netmask, peer)]

        self.forwarding_table = new_table
        self.coalesce()

        return


    def withdraw(self, packet):
        self.disaggregate()

        peer = packet['src']
        networks_to_remove = packet['msg']

        for route in networks_to_remove:
            network = route['network']
            netmask = route['netmask']
            if (network, netmask, peer) in self.forwarding_table:
                del self.forwarding_table[(network, netmask, peer)]

        for dst in self.relations.keys():
            if peer != dst:
                packet['src'] = self.our_addr(dst)
                packet['dst'] = dst
                try:
                    self.send(dst, json.dumps(packet))
                except Exception as e:
                    print(f"ERROR WHEN UPDATING: {e}")
                    return
        return True

    def handlePacket(self, packet, srcif):
        noerror = False
        type = packet['type']
        
        if type == 'update':
            self.changes.append(copy.deepcopy(packet))
            print(f'UPDATED CHANGES WITH ----> {packet}')
            noerror = self.update(packet, srcif)
        elif type == 'data':
            noerror = self.data(packet, srcif)
        elif type == 'dump':
            noerror = self.dump(packet)
        elif type == 'withdraw':
            self.changes.append(copy.deepcopy(packet))
            print(f'UPDATED CHANGES WITH ----> {packet}')
            noerror = self.withdraw(packet)
        else:
            print(f'Unknown packet type')
            return
        
        #Check if an error occurred when handling the packet
        if not noerror:
            pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
