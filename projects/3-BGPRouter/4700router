#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

class ForwardingTableEntry:
    def __init__(self, src, ASPath, network, netmask, localpref, origin, selfOrigin):
        self.ASPath = ASPath
        self.localpref = localpref
        self.netmask = netmask
        self.network = network
        self.origin = origin
        self.selfOrigin = selfOrigin
        self.src = src

class Router:

    relations = {}
    sockets = {}
    ports = {}

    def __init__(self, asn, connections):
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        self.forwarding_table = []
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")

            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')
                print("Received message '%s' from %s" % (msg, srcif))

                try:
                    parsed_msg = json.loads(msg)
                    print(f'-----PARSED MESSAGE-----\n{parsed_msg}')
                    self.handleMessage(socket, parsed_msg)
                except json.JSONDecodeError as e:
                    print(f'Error parsing the json: {e}')
        return
    
    def handleMessage(self, socket, message):
        type = message['type']
        if type == 'update':
            self.handleUpdate(message)
        elif type == 'dump':
            self.handleDump(message)

    def handleUpdate(self, message):
        src = message['src']
        entry = ForwardingTableEntry(ASPath=message['msg']['ASPath'],
                                     localpref=message['msg']['localpref'],
                                     netmask=message['msg']['netmask'],
                                     network=message['msg']['network'],
                                     origin=message['msg']['origin'],
                                     selfOrigin=message['msg']['selfOrigin'],
                                     src=src)
        self.forwarding_table.append(entry)

        if src in self.relations:
            # Chek if the src is a cust or peer/provider
            from_cust = self.relations[src] == 'cust'
            self.broadcastUpdate(message, from_cust)

    def broadcastUpdate(self, message, from_cust):
            for dest, rel in self.relations.items():
                if dest == message['src'] or (rel != 'cust' and not from_cust):
                    continue
                self.sendUpdate(message, dest)

    def sendUpdate(self, message, dst):
        msg_data = message['msg']
        ASPath = [self.asn] + msg_data['ASPath']

        update = {
            'src': self.our_addr(dst),
            'dst': dst,
            'type': 'update',
            'msg': {
                'network': msg_data['network'],
                'netmask': msg_data['netmask'],
                'ASPath': ASPath
            }
        }
        self.send(dst, json.dumps(update))

    def handleDump(self, message):
        pass

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
